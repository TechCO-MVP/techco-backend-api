service: backend-proposal-v2
frameworkVersion: "3"
configValidationMode: error

provider:
  name: aws
  runtime: python3.11
  stage: dev
  region: us-east-1
  timeout: 30
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  layers:
    - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:3
    - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p311-pymongo:11
  environment:
    REGION_NAME: ${self:provider.region}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoPasswordlessUserPoolClient
    DOCUMENTDB_USERNAME: ${self:resources.Resources.DocumentDBCluster.Properties.MasterUsername}
    DOCUMENTDB_SECRET_NAME: ${self:resources.Resources.DocumentDBSecretPassword.Properties.Name}
    DOCUMENTDB_ENDPOINT: !GetAtt DocumentDBCluster.Endpoint
    DOCUMENTDB_PORT: 27017
    DOCUMENTDB_DB_NAME: techco

  logs:
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:sendEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - !Ref DocumentDBSecretPassword

custom:
  userPoolName: ${self:provider.stage}-passwordless-user-pool

resources:
  Resources:
    CognitoUserPool: ${file(./src/resources/auth/serverless.yml):CognitoUserPool}
    CognitoPasswordlessUserPoolClient: ${file(./src/resources/auth/serverless.yml):CognitoPasswordlessUserPoolClient}
    ApiGatewayAuthorizer: ${file(./src/resources/auth/serverless.yml):ApiGatewayAuthorizer}
    VPC: ${file(./src/resources/db/serverless.yml):VPC}
    InternetGateway: ${file(./src/resources/db/serverless.yml):InternetGateway}
    VPCGatewayAttachment: ${file(./src/resources/db/serverless.yml):VPCGatewayAttachment}
    PublicSubnet1: ${file(./src/resources/db/serverless.yml):PublicSubnet1}
    PublicSubnet2: ${file(./src/resources/db/serverless.yml):PublicSubnet2}
    PublicRouteTable: ${file(./src/resources/db/serverless.yml):PublicRouteTable}
    PublicRoute: ${file(./src/resources/db/serverless.yml):PublicRoute}
    PublicSubnetRouteTableAssociation1: ${file(./src/resources/db/serverless.yml):PublicSubnetRouteTableAssociation1}
    PublicSubnetRouteTableAssociation2: ${file(./src/resources/db/serverless.yml):PublicSubnetRouteTableAssociation2}
    PrivateSubnet1: ${file(./src/resources/db/serverless.yml):PrivateSubnet1}
    PrivateSubnet2: ${file(./src/resources/db/serverless.yml):PrivateSubnet2}
    NATGateway1: ${file(./src/resources/db/serverless.yml):NATGateway1}
    EIP1: ${file(./src/resources/db/serverless.yml):EIP1}
    NATGateway2: ${file(./src/resources/db/serverless.yml):NATGateway2}
    EIP2: ${file(./src/resources/db/serverless.yml):EIP2}
    PrivateRouteTable1: ${file(./src/resources/db/serverless.yml):PrivateRouteTable1}
    PrivateRoute1: ${file(./src/resources/db/serverless.yml):PrivateRoute1}
    PrivateRouteTableAssociation1: ${file(./src/resources/db/serverless.yml):PrivateRouteTableAssociation1}
    PrivateRouteTable2: ${file(./src/resources/db/serverless.yml):PrivateRouteTable2}
    PrivateRoute2: ${file(./src/resources/db/serverless.yml):PrivateRoute2}
    PrivateRouteTableAssociation2: ${file(./src/resources/db/serverless.yml):PrivateRouteTableAssociation2}
    LambdaSecurityGroup: ${file(./src/resources/db/serverless.yml):LambdaSecurityGroup}
    DocumentDBSecurityGroup: ${file(./src/resources/db/serverless.yml):DocumentDBSecurityGroup}
    DocumentDBSubnetGroup: ${file(./src/resources/db/serverless.yml):DocumentDBSubnetGroup}
    DocumentDBSecretPassword: ${file(./src/resources/db/serverless.yml):DocumentDBSecretPassword}
    DocumentDBCluster: ${file(./src/resources/db/serverless.yml):DocumentDBCluster}
    DocumentDBInstance: ${file(./src/resources/db/serverless.yml):DocumentDBInstance}

    serverlessApiGatewayCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverlessApiGatewayCloudWatchRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ApiGatewayCloudWatchLogsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                  Resource: "*"

functions:
  define_auth_challenge:
    handler: src/adapters/primary/auth/define_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: DefineAuthChallenge
          existing: true

  create_auth_challenge:
    handler: src/adapters/primary/auth/create_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: CreateAuthChallenge
          existing: true

  verify_auth_challenge:
    handler: src/adapters/primary/auth/verify_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: VerifyAuthChallengeResponse
          existing: true

  pre_signup:
    handler: src/adapters/primary/auth/pre_signup.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: PreSignUp
          existing: true

  sign_up:
    handler: src/adapters/primary/auth/sign_up.handler
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true
          private: true
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  create_business:
    handler: src/adapters/primary/create_business/index.handler
    events:
      - http:
          path: /business/create
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

    environment:
      ENV: ${self:provider.stage}

  start_auth:
    handler: src/adapters/primary/auth/start_auth.lambda_handler
    events:
      - http:
          path: /auth/start_auth
          method: post
          cors: true
          private: true
          request:
            schemas:
              application/json: ${file(src/adapters/primary/auth/schemas/start_auth.json)}
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  verify_auth_otp_code:
    handler: src/adapters/primary/auth/verify_auth_otp_code.lambda_handler
    events:
      - http:
          path: /auth/verify_auth_otp_code
          method: post
          cors: true
          private: true
          request:
            schemas:
              application/json: ${file(src/adapters/primary/auth/schemas/verify_auth_otp_code.json)}
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  sign_out:
    handler: src/adapters/primary/auth/sign_out.lambda_handler
    events:
      - http:
          path: /auth/sign_out
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
          private: true
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

plugins:
  - serverless-offline
