service: backend-proposal-v2
frameworkVersion: '3'
configValidationMode: error

provider:
  name: aws
  runtime: python3.11
  stage: dev
  region: us-east-1
  layers:
    - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:3
  environment:
    REGION_NAME: ${self:provider.region}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoPasswordlessUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:sendEmail
          Resource: "*"

custom:
  userPoolName: ${self:provider.stage}-passwordless-user-pool

resources:
  Resources:
    CognitoUserPool: ${file(./src/resources/auth/serverless.yml):CognitoUserPool}
    CognitoPasswordlessUserPoolClient: ${file(./src/resources/auth/serverless.yml):CognitoPasswordlessUserPoolClient}
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognitoAuth
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:us-east-1:961341535118:userpool/us-east-1_FTq2CGtIF

functions:

  define_auth_challenge:
    handler: src/adapters/primary/auth/define_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: DefineAuthChallenge
          existing: true

  create_auth_challenge:
    handler: src/adapters/primary/auth/create_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: CreateAuthChallenge
          existing: true

  verify_auth_challenge:
    handler: src/adapters/primary/auth/verify_auth_challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: VerifyAuthChallengeResponse
          existing: true

  pre_signup:
    handler: src/adapters/primary/auth/pre_signup.handler
    events:
      - cognitoUserPool:
          pool: ${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}
          trigger: PreSignUp
          existing: true

  sign_up:
    handler: src/adapters/primary/auth/sign_up.handler
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true
          private: true
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  create_organization:
    handler: src/adapters/primary/create_organization/index.handler
    events:
      - http:
          path: /organizations/create
          method: post
          cors: true
          private: true
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  start_auth:
    handler: src/adapters/primary/auth/start_auth.lambda_handler
    events:
      - http:
          path: start_auth
          method: post
          cors: true
          private: true
          request:
            schemas:
              application/json: ${file(src/adapters/primary/auth/schemas/start_auth.json)}
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  verify_auth_otp_code:
    handler: src/adapters/primary/auth/verify_auth_otp_code.lambda_handler
    events:
      - http:
          path: verify_auth_otp_code
          method: post
          cors: true
          private: true
          request:
            schemas:
              application/json: ${file(src/adapters/primary/auth/schemas/verify_auth_otp_code.json)}
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

  sign_out:
    handler: src/adapters/primary/auth/sign_out.lambda_handler
    events:
      - http:
          path: sign_out
          method: post
          authorizer:
            name: cognitoAuth
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:961341535118:userpool/us-east-1_FTq2CGtIF
          cors: true
          private: true
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      ENV: ${self:provider.stage}

plugins:
  - serverless-offline
